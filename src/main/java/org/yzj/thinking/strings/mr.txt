package edu.yzj.vertica.hadoop;

import com.vertica.hadoop.VerticaInputFormat;
import com.vertica.hadoop.VerticaOutputFormat;
import com.vertica.hadoop.VerticaRecord;
import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.conf.Configured;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.util.Tool;
import org.apache.hadoop.util.ToolRunner;

import java.io.IOException;

/**
 * Created by yuzhoujun on 2017/2/19.
 */
public class VerticaExample extends Configured implements Tool {
    @Override
    public int run(String[] args) throws Exception{
        Configuration conf = getConf();


        conf.set("mapreduce.job.tracker", "local");
        conf.set("fs.default.name", "file:///");
        conf.set("mapred.vertica.hostnames", "ali");
        conf.set("mapred.vertica.port", "5433");
        conf.set("mapred.vertica.username", "test");
        conf.set("mapred.vertica.password", "123");
        conf.set("mapred.vertica.password", "vertica");

        Job job = new Job(conf);
        job.setJobName("vertica");

        job.setInputFormatClass(VerticaInputFormat.class);
        job.setMapOutputKeyClass(IntWritable.class);
        job.setMapOutputValueClass(Text.class);
        job.setOutputKeyClass(Text.class);
        job.setOutputValueClass(VerticaRecord.class);

        job.setJarByClass(VerticaExample.class);
        job.setMapperClass(Map.class);
        job.setReducerClass(Reduce.class);

        VerticaOutputFormat.setOutput(job, "t_xl", true, "id int", "name varchar");
        VerticaInputFormat.setInput(job, "select * from t_yzj");
        job.waitForCompletion(true);
        return 0;
    }

    public static class Map extends Mapper<LongWritable, VerticaRecord, IntWritable, Text> {

        public void map(LongWritable key, VerticaRecord value, Context context) throws
                IOException, InterruptedException {
            if (value.get(0) != null && value.get(1) != null) {
                context.write(new IntWritable((int)value.get(0)), new Text((String)value.get(1)));
            }
        }
    }

    public static class Reduce extends Reducer<IntWritable, Text, Text, VerticaRecord> {

        private VerticaRecord record;

        public void setup(Context context) throws IOException, InterruptedException {
            super.setup(context);

            try {
                record = new VerticaRecord(context.getConfiguration());
            } catch (Exception e) {
                throw new IOException(e);
            }
        }

        public void reduce(IntWritable key, Iterable<Text> values, Context context) throws
                IOException, InterruptedException {
            if (record == null) {
                throw new IOException("No output record found");
            }

            try {
                record.set(0,1);
                record.set(1,"xiaolu");
            } catch (Exception e) {
                e.printStackTrace();
            }

            context.write(new Text("test.t_xl"), record);
        }
    }

    public static void main(String[] args) throws Exception {
        int res = ToolRunner.run(new Configuration(), new VerticaExample(), args);
    }
}
